apiVersion: v1
kind: ServiceAccount
metadata:
  name: mysa-role
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default
  name: pod-reader
rules:
- apiGroups: [""] # "" indicates the core API group
  resources: ["pods"]
  verbs: ["get", "watch", "list"]
# - apiGroups: ["apps"] # "" indicates the core API group
#   resources: ["deployments"]
#   verbs: ["get", "watch", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
# This role binding allows "jane" to read pods in the "default" namespace.
# You need to already have a Role named "pod-reader" in that namespace.
kind: RoleBinding
metadata:
  name: read-pods
  namespace: default
subjects:
# You can specify more than one "subject"
- kind: ServiceAccount
  name: mysa-role # "name" is case sensitive
  namespace: default
roleRef:
  # "roleRef" specifies the binding to a Role / ClusterRole
  kind: Role #this must be Role or ClusterRole
  name: pod-reader # this must match the name of the Role or ClusterRole you wish to bind to
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Pod
metadata:
  name: kubepod
spec:
  containers:
  - image: clarusway/kubectl
    name:  kubepod
  serviceAccountName: mysa-role

# A role is created to query pods in the default namespace inside a pod
# A role cannot be attached to a pod directly. For that there has to be a service acount defined
# With a role binding, the role is bound to a service account
# Thanks to this template, the pod 'kubepod' can query the pods in the default namespace, accessing the Kube API server