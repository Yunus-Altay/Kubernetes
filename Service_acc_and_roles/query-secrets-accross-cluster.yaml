apiVersion: v1
kind: ServiceAccount
metadata:
  name: mysa-clusterrole
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  # "namespace" omitted since ClusterRoles are not namespaced
  name: secret-reader
rules:
- apiGroups: [""]
  #
  # at the HTTP level, the name of the resource for accessing Secret
  # objects is "secrets"
  resources: ["secrets"]
  verbs: ["get", "watch", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
# This cluster role binding allows anyone in the "manager" group to read secrets in any namespace.
kind: ClusterRoleBinding
metadata:
  name: read-secrets-global
subjects:
- kind: ServiceAccount
  name: mysa-clusterrole # Name is case sensitive
  namespace: default
roleRef:
  kind: ClusterRole
  name: secret-reader
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Pod
metadata:
  name: kubepod-2
spec:
  containers:
  - image: clarusway/kubectl
    name:  kubepod-2
  serviceAccountName: mysa-clusterrole

# A cluster role is created to query secrets across the cluster inside a pod as the cluster role is not namespaced
# A cluster role cannot be attached to a pod directly. For that there has to be a service acount defined
# With a cluster role binding, the role is bound to a service account
# Thanks to this template, the pod 'kubepod-2' can query the secrets accross the cluster, accessing the Kube API server  